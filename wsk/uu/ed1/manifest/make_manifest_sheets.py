#
# This script will download and annotate the manifest from UU with the sheet / sub sheet ids from the CSV
#
# The CSV file was generated by using the DB manager in QGIS and exporting the result of the query
# ```sql
# select distinct cast(sheet_id as integer), cast(sub_sheet_id as integer), sheet_title from "waterstaatskaart-dlcs-annotated" where edition <=2 order by cast(sheet_id as integer), cast(sub_sheet_id as integer)
# ```
# (the DLCS csv was downloaded originally from github)
# Sheet 'Steenwijk 4' appears to be present twice in the UU collection, so another row was inserted manually in the CSV file
#
# To see what is changed, run:
# ```
# meld out_orig.json out_new.json
# ```


import requests
import json
import csv


def get_json(url):
    r = requests.get(url)
    return r.json()


url = "https://objects.library.uu.nl/manifest/iiif/v2/1874-389916"
J = get_json(url)

map_sheets = []
with open("all_sheets.csv") as fh:
    next(fh)
    lines = csv.reader(fh)
    for sheet in lines:
        # sheet_id, sub_sheet_id, description = int(line[0]), int(line[1]), line[2]
        # sheet = (sheet_id, sub_sheet_id, description)
        map_sheets.append(" - ".join(sheet))

# print(J.keys())
# import sys

# sys.exit()

new_manifest = {}
# new_sequence = {}

for key in [
    "@context",
    "@id",
    "@type",
    "label",
    "metadata",
    "description",
    "license",
    "attribution",
    "rendering",
    # "sequences", # this key will be overwritten with new content
    "related",
    "seealso",
]:
    new_manifest[key] = J[key]

new_manifest["sequences"] = []
for sequence in J["sequences"]:
    new_sequence = {}
    for key in ["@type", "label"]:
        new_sequence[key] = sequence[key]

    new_sequence["canvases"] = []

    for canvas_id, canvas in enumerate(sequence["canvases"]):
        # print(" " * 2, canvas_id, canvas.keys())
        new_canvas = {}
        for key in [
            "@id",
            "@type",
            "label",
            "height",
            "width",
            "related",
            "images",
        ]:
            new_canvas[key] = canvas[key]
            # overwrite the label for the map sheets
            # with a label that has the sheet id and sub sheet id in it
            if key == "label" and canvas_id >= 12:
                label = canvas[key]
                if canvas_id - 12 <= len(map_sheets):
                    label = map_sheets[canvas_id - 12] + " - " + canvas[key]
                new_canvas[key] = label
        new_sequence["canvases"].append(new_canvas)
    new_manifest["sequences"].append(new_sequence)

with open("out_orig.json", "w") as fh:
    json.dump(J, fh, indent=2, sort_keys=True)
with open("out_new.json", "w") as fh:
    json.dump(new_manifest, fh, indent=2, sort_keys=True)
